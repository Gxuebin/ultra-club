name: Taro 多端小程序开发大型实战
id: 34a473b9e9e5e3dafcc619ab152750af
created: '2019-12-25T10:16:40.222Z'
updated: 2020-01-06T07:15:21.228Z
github: 'https://github.com/tuture-dev/ultra-club'
topics:
  - Taro
categories:
  - 小程序
  - Taro
  - 入门
description: >-
  正当移动互联网进入白热化阶段时，以微信小程序为代表的一类“轻应用”异军突起。它们无需下载，使用方便，“用完即走”，同时功能也较为完备，一经推出即得到了各大平台和及用户的热烈追捧。但是问题也随之而来——开发者们要同时维护
  Web 端、移动端、微信小程序、支付宝小程序等等多套用户界面，其维护成本可以想象。作为一个优秀的多端统一开发解决方案，Taro 的出现则改变了这一情况。正值
  Taro 2.x 进入 beta 阶段，让我们沏上一杯茶，开始我们的 Taro 多端小程序开发之旅吧。
splits:
  - name: Taro 小程序开发大型实战（一）：熟悉的 React，熟悉的 Hooks
    description: >-
      正当移动互联网进入白热化阶段时，以微信小程序为代表的一类“轻应用”异军突起。它们无需下载，使用方便，“用完即走”，同时功能也较为完备，一经推出即得到了各大平台和及用户的热烈追捧。但是问题也随之而来——开发者们要同时维护
      Web 端、移动端、微信小程序、支付宝小程序等等多套用户界面，其维护成本可以想象。作为一个优秀的多端统一开发解决方案，Taro
      的出现则改变了这一情况。正值 Taro 2.x 进入 beta 阶段，让我们沏上一杯茶，开始我们的 Taro 多端小程序开发之旅吧。
    cover: tuture-assets/taro-cover-1.jpg
    id: 34a473b9e9e5e3dafcc619ab152750af
    start: '8565035'
    end: da834d1
  - name: Taro 小程序开发大型实战（二）：多页面跳转和 Taro UI 组件库
    description: >-
      在上一篇教程中，我们用熟悉的 React 和 Hooks 搞定了“奥特曼俱乐部”的雏形。在这一篇文章中，我们将用 Taro
      自带的路由功能实现多页面跳转，并用 Taro UI 组件库升级之前略显简陋的界面。
    cover: tuture-assets/taro-cover-2.jpg
    topics:
      - Taro
      - Taro UI
    id: af6922503ad1941b09b324ffa35f33ea
    start: f6c79ab
    end: 63131b6
  - name: Taro 小程序开发大型实战（三）：实现微信和支付宝多端登录
    description: >-
      能够借助所在平台实现“一键登录”是小程序的一大优势，大大降低了用户的使用门槛，但是各平台处理登录和鉴权的方式又存在较大的差异。在这一篇文章中，我们将带你踩过“多端登录”的“坑”，让用户能够在不同的平台轻松登录我们的应用。
    cover: tuture-assets/taro-cover-3.jpg
    id: 5e10118be51d454165777203
    categories:
      - 小程序
      - Taro
      - 进阶
    start: 1da2fee
    end: 1da2fee
  - name: Taro 小程序开发大型实战（四）：Hooks + Redux 双剑合璧
    description: >-
      随着状态增多，状态提升的操作也随着增多，导致保存这些状态的父组件会臃肿不堪，而且每次状态的改变需要影响很多中间组件，带来极大的性能开销。在这篇长文中，我们将用
      Hooks 版的 Redux 来解决状态管理的难题，而让 Taro 专注于渲染用户界面。
    cover: tuture-assets/taro-cover-4.jpg
    id: 5e100f78e51d4541493621cd
    topics:
      - Taro
      - Redux
    categories:
      - 小程序
      - Taro
      - 进阶
    start: a3cf715
    end: a3cf715
steps:
  - name: 起步
    commit: '8565035'
    diff:
      - file: .editorconfig
      - file: .eslintrc
      - file: .gitignore
      - file: .prettierrc
      - file: config/dev.js
        display: false
        explain:
          pre: ''
      - file: config/index.js
        display: false
      - file: config/prod.js
        display: false
      - file: package.json
        display: false
      - file: project.config.json
        display: false
      - file: src/app.jsx
        display: true
        explain:
          pre: |-
            ### 初探脚手架代码

            `src/app.jsx` 定义了项目的根组件 `App`，它的代码如下：
          post: >-
            如果你熟悉 React 的话，那么上面这段代码一定不难理解，只不过是把相应的地方（导包、渲染）从之前的 `React` 以及
            `ReactDOM` 改成 `Taro`。



            ::: warning

            **注意**


            可以看到这个组件还多了一个 `config` 属性，这个属性是小程序应用专属的。其中要重点关注的是 `pages`
            数组，列出了所有的页面模块，例如这里的 `pages/index/index` 就对应
            src/pages/index/index.jsx。后面在实现路由时还会用到 `pages` 属性。

            :::
      - file: src/app.scss
        display: false
      - file: src/index.html
        display: false
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            我们再看看 `src/pages/index/index.jsx`。按照最佳实践，Taro 项目中一般把页面组件放到
            `src/pages` 目录中，`src/pages/index` 就是 `index` 页面组件模块，其中 index.jsx
            的代码如下：
          post: >-
            依旧是熟悉的 React 组件风格，只不过与普通的 React 相比，在 `render` 函数中我们用的不再是 `div` 和 `p`
            标签，而是 Taro 为我们准备好的 `View` 和 `Text` 组件。为什么 Taro 要自己搞一套组件库呢？因为 Taro
            的目标是星辰大海……sorry，是能够编译到各个平台。**只有通过制订 Taro
            自己的组件库，才能在各个平台的原生组件库上盖了一层抽象层，进而实现跨平台的目标**。



            ::: info

            **提示**


            如果你有过 React Native 的开发经验，那么一定对 Taro 组件库不陌生。

            :::
      - file: src/pages/index/index.scss
        display: false
      - file: yarn.lock
    explain:
      pre: "对于国内 React 开发者来说，[Taro](https://taro.jd.com/) 的出现无疑是福音——它能够让我们用熟悉的 React 代码去搭建各类小程序，并且一份代码可以编译成多个平台的应用（目前包括微信小程序、支付宝小程序、React Native、H5 等等）。随着 Taro 的不断进化，它对 React 代码的支持程度越来越好，所支持的目标平台也越来越多，学习的价值自然不必多言。正值 Taro 进入 2.0.0 版本的 beta 阶段，我们在这一篇教程将手把手带你实现一个能够部署到多端的小程序，让你感受 Taro 的强大与魅力！\n\n在这一系列教程中，我们将构建一个多端小程序应用——奥特曼俱乐部（Ultraman Club，简称 UltraClub），一个支持多端登录（微信和支付宝）的类似贴吧的小程序。我们还提供了项目仓库的 [GitHub 地址](https://github.com/tuture-dev/ultra-club)。*项目目前还在开发阶段，您可以跳转到任意一次 commit 查看当前步骤的所有代码哦。*\n\n### 我们将构建什么？\n\n在完成这篇教程后，项目的 GIF 动图展示如下：\n\n![](tuture-assets/taro-demo1.gif)\n\n具体有三个页面：\n\n1. **主页**：展示了所有帖子，以及添加新帖子的按钮。\n2. **帖子详情**：展示单个帖子的全部内容。\n3. **个人主页**：展示用户的个人信息。\n\n### 前提条件\n\n在阅读这篇教程之前，我们希望你已经具备以下知识：\n\n- 了解 HTML、CSS、JavaScript 的基础知识，如果了解 Sass 就更好了\n- 了解 React 框架的基础知识，可以参考[这篇教程](https://tuture.co/2019/11/18/07acf61/)进行学习；如果接触过 React Native 以及 Hooks 则更好了\n- 了解并已经安装好 Node 与 npm，可以参考[这篇教程](https://tuture.co/2019/12/03/892fa12/)进行学习\n\n*除此之外，你还需要下载并安装微信开发者工具，这里是[下载地址](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)。*\n\n### 用 Taro 脚手架初始化项目\n\n首先安装 Taro CLI：\n\n```bash\nnpm install -g @tarojs/cli\n```\n\n然后创建我们的项目：\n\n```bash\ntaro init ultra-club\n```\n\n之后会出现一系列选项，按照下图所示进行选择即可（CSS 预处理器选择 [Sass](https://www.sass.hk/)，模板选择“默认模板”，老司机可自行选择使用 TS）：\n\n![](tuture-assets/taro-init.png)\n\n\n::: info\n**提示**\n\n本项目使用 [Sass](https://www.sass.hk/) 主要是为了兼容 taro-ui 的样式，并没有使用到 Sass 的高级特性，如果你不熟悉的话也不用担心哦，就当成是常规的 CSS 代码。\n:::\n\n\n进入到我们的项目目录 ultra-club 之后，可以看到项目模板包括以下文件：\n\n```text\n.\n├── config                    # 项目配置\n│\_\_ ├── dev.js                # 开发环境配置文件\n│\_\_ ├── index.js              # 主配置文件\n│\_\_ └── prod.js               # 生产环境配置文件\n├── package.json\n├── project.config.json       # 微信小程序项目配置\n└── src                       # 项目源码目录\n    ├── app.scss              # 根组件样式\n    ├── app.jsx               # 根组件 app\n    ├── index.html            # 等待被嵌入代码的 HTML 文档\n    └── pages                 # 页面目录\n        └── index             # index 页面模块\n            ├── index.scss    # index 页面样式\n            └── index.jsx     # index 页面组件\n```\n\n我们主要看一下两个代码文件：`src/app.jsx` 以及 `src/pages/index/index.jsx`。"
      post: >-
        ### 运行小程序


        Taro 提供的模板代码直接可以运行。打开终端，运行以下命令：


        ```bash

        npm run dev:weapp

        ```


        会出现以下提示信息：


        ![](tuture-assets/dev-weapp.png)


        当看到“监听文件修改中...”的提示后，我们就可以打开微信开发者工具，用微信扫码登录后界面如下：


        ![](tuture-assets/wechat-dev-new.png)


        点击那个硕大的➕号，开始导入我们刚才创建的 ultra-club 项目：


        ![](tuture-assets/import-project.png)


        如上图所示，首先切换到”导入项目“一栏，然后点击”目录“输入栏右侧的按钮选择刚才创建的 ultra-club
        文件夹，最后点击右下角的”导入“按钮即可。


        导入成功后，微信开发者工具的界面如下图所示：


        ![](tuture-assets/devtool-ui.png)


        在模拟器页面中，看到了我们 `index` 页面渲染的 Hello
        world；编辑器能够查看所有代码，不过通常我们用自己习惯的代码编辑器来开发（VSCode 真香！）；调试器则是类似 Chrome
        的开发者工具。


        一切就绪，让我们开始动工吧！


        ::: info

        **提示**


        从这一步开始，我们的主要开发目标将是微信小程序，但是不要担心，我们会在文章的最后演示怎么编译到其他平台哦。

        :::
  - name: React 代码，熟悉的味道
    commit: 102299e
    diff:
      - file: src/components/PostCard/index.jsx
        display: true
        explain:
          pre: >-
            ### 实现 PostCard 组件


            首先创建 `src/components` 目录，我们的通用组件都会放在这里面。然后创建
            `src/components/PostCard` 组件目录，在其中分别创建 `index.jsx` 和
            `index.scss`。`index.jsx` 代码如下：
          post: 正如之前所说，`PostCard` 组件包含两个 props：标题 `title` 和内容 `content`。
      - file: src/components/PostCard/index.scss
        display: true
        explain:
          pre: PostCard 组件的样式 `index.scss` 代码如下：
      - file: src/components/PostForm/index.jsx
        display: true
        explain:
          pre: >-
            ### 实现 PostForm 组件


            接着我们实现用于创建新帖子的 PostForm 组件。在 `src/components` 中创建 `PostForm`
            目录，并在其中添加 `index.jsx` 和 `index.scss` 文件。`index.jsx` 代码如下：
          post: >
            `PostForm` 组件一共定义了五个 props，分别如下：


            - `formTitle`：当前编辑中帖子的标题

            - `formContent`：当前编辑中帖子的内容

            - `handleSubmit`：处理提交表单的回调函数

            - `handleTitleInput`：处理标题接收到用户输入时的回调函数

            - `handleContentInput`：处理内容接收到用户输入时的回调函数



            ::: info

            **提示**


            如果你不熟悉 React，可能会对上面编写表单的方式有点困惑。实际上，React
            推荐用”受控组件“的方式编写表单，可参考[这篇文档](https://zh-hans.reactjs.org/docs/forms.html)。

            :::
      - file: src/components/PostForm/index.scss
        display: true
        explain:
          pre: PostForm 的样式文件 `index.scss` 的代码如下：
      - file: src/components/index.jsx
        display: true
        explain:
          pre: >-
            为了方便在页面组件中使用 `PostCard` 和 `PostForm` 组件，我们把 `src/components`
            变成一个模块。具体地，创建 `src/components/index.jsx`，代码如下：
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            ### 在 index 页面中接入 PostCard 和 PostForm


            最后在 `src/pages/index/index.jsx` 文件中加入之前写好的 PostCard 和 PostForm
            组件，代码如下：
          post: |-
            可以看到，除了接入之前定义的两个组件外，我们还加入了一些状态：

            - `posts`：当前所有的帖子，每个帖子是一个包含 `title` 和 `content` 的对象
            - `formTitle`：当前正在编辑的帖子的标题
            - `formContent`：当前正在编辑的帖子的内容

            以及定义了 `PostForm` 组件中所需要的三个回调函数。
    explain:
      pre: |-
        从这一步开始，我们就来实现”奥特曼俱乐部“小程序。按照 React 中”万物皆组件“的思想，我们抽象出两个组件：

        - `PostCard`：用于展示一篇帖子，包括标题 `title` 和内容 `content`
        - `PostForm`：用于发布新帖子的表单
      post: >
        ### 查看效果


        如果之前的开发服务器还打开着，那么微信开发者工具应该就能直接看到效果了（如果刚才关了，可以运行 `npm run dev:weapp`
        再次打开哦）：


        ![](tuture-assets/taro-demo1.gif)



        ::: warning

        **注意**


        有时候 Taro 可能会出现样式加载失败的问题。如果你遇到了，可以关闭开发服务器，重新运行 `npm run dev:weapp`。

        :::
  - name: Hooks 轻装上阵
    commit: da834d1
    diff:
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            ### 动手环节


            到了动手环节，我们用 `useState` 来重构我们的 index 页面。具体地，我们将整个 `Index`
            组件转换成函数式组件，然后之前的三个状态都用 `useState` 来创建，代码如下：
          post: >

            ::: warning

            **注意**


            由于我们把 `Index` 从类组件改造成了函数组件，所以挂载 `config` 要在 `Index` 组件定义之后直接挂载在
            `Index` 上面。

            :::
    explain:
      pre: >-
        自从 React 团队在 2018 年的 React Conf 引入了 Hooks 之后，前端圈无疑是经历了一场地震。仅仅只需几个
        API，就轻松地用**纯函数**的方式搞定了组件的状态管理和数据流，这是何等的神仙操作？


        幸运的是，Taro 团队也在 v1.3.0 版本中添加了[对 Hooks
        的支持](http://taro-docs.jd.com/taro/docs/hooks.html)。因此，我们也将在本项目中用 Hooks
        解决状态管理和数据流的问题。


        ### Hooks 之 useState 快速复习


        本文在这里简单地过一遍 `useState` Hook，如果你已经很熟悉了，请直接移步下面的动手环节。


        比如我们之前有这么一个类组件 `ClickMe`，它会抱怨你点了它多少次：


        ```javascript

        class ClickMe extends Component {
          state = { count: 0 }

          render() {
            return (
              <div>
                <button onClick={() => this.setState({ count: this.state.count + 1 })}>
                  你点了我 {this.state.count} 次！
                </button>
              </div>
            )
          }
        }

        ```


        用 Hooks 改写之后，就变成了一个函数式组件：


        ```javascript

        // 记得导入 useState 函数

        import Taro, { useState } from '@tarojs/taro'


        function ClickMe() {
          const [count, setCount] = useState(0)

          return (
            <div>
              <button onClick={() => setCount(count + 1)}>你点了我 {count} 次！</button>
            </div>
          )
        }

        ```


        可以看到，`useState` 函数返回了两个值：


        - **状态**（也就是上面的 `count`）：可以在渲染时直接使用

        - **修改状态的函数**（也就是上面的 `setCount`）：用于在处理相应事件时，通过传入新的状态来更新状态


        还注意到 `useState` 接受一个参数，即**状态的初始值**。这里我们取了一个 `Number`
        类型，事实上还可以是字符串、数组、对象等等。
      post: >-
        你尽可以打开模拟器试一下重构之后效果，看看功能是否与上一步完全一致哦！在接下来的[第二篇](https://tuture.co/2019/12/25/af69225/)中，我们将进一步实现多页面跳转，并用
        Taro UI 组件库升级我们的界面。
  - name: 来一打页面
    commit: f6c79ab
    diff:
      - file: src/app.jsx
        display: true
        explain:
          pre: |-
            ### 配置全部页面

            首先在入口文件 `src/app.jsx` 中配置好所有页面：
          post: 注意到我们还在 `config` 中注册了导航栏 `tabBar`，用来在底部切换 `index` 页面和 `mine` 页面。
      - file: src/components/PostCard/index.jsx
        display: true
        explain:
          pre: >-
            ### 在 PostCard 中添加跳转逻辑


            我们首先在 `PostCard` 组件中添加跳转逻辑，使得它被点击后将进入该帖子的详情页面。将
            `src/components/PostCard/index.jsx` 按如下代码进行修改：
          post: >
            可以看到，我们在 `PostCard` 中注册了 `handleClick` 用于响应点击事件。在 `handleClick`
            函数中，我们通过新引入的 `isList` 属性判断这个组件是否展示在首页列表中。如果是的话，就通过 `Taro.navigateTo`
            进行跳转。



            ::: info

            **提示**


            眼尖的你一定发现了我们在调用 `navigateTo`
            时还加上了**查询字符串**用于传递参数。在接下来实现帖子详情页面时，我们就可以接收到传递进来的 `title` 和 `content`
            的值啦。

            :::
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            接着我们需要在首页模块中给 `PostCard` 组件加上 `isList`。修改
            `src/pages/index/index.jsx`，代码如下：
      - file: src/pages/post/post.jsx
        display: true
        explain:
          pre: >-
            ### 实现“帖子详情”页面


            在 `src/pages` 中创建 `post` 目录，然后在其中创建 post.jsx 和
            post.scss，分别为页面模块和样式文件。post.jsx 代码如下：
          post: >-
            注意到我们用了 `useRouter` 这个 Hook（Taro 专有），它用来在函数组件中获取 `router`，等同于之前类组件中的
            `this.$router`。有了 `router`，我们就可以获取到在刚才 `PostCard` 组件跳转时传进来的 `title`
            和 `content` 参数了。
      - file: src/pages/post/post.scss
        display: true
        explain:
          pre: post.scss 的代码如下：
      - file: src/pages/mine/mine.jsx
        display: true
        explain:
          pre: >-
            ### 实现“我的”页面


            接着我们实现“我的”页面。创建 `src/pages/mine` 目录，在其中创建 mine.jsx 和 mine.scss。页面组件
            mine.jsx 代码如下：
      - file: src/pages/mine/mine.scss
        display: true
        explain:
          pre: 样式文件 mine.scss 代码如下：
      - file: src/images/avatar.png
      - file: src/images/home.png
      - file: src/images/homeSelected.png
      - file: src/images/mine.png
      - file: src/images/mineSelected.png
    explain:
      pre: >-
        在[上一篇教程](https://tuture.co/2019/12/25/34a473b/)中，我们用熟悉的 React 和 Hooks
        搞定了“奥特曼俱乐部”的雏形。在这一篇文章中，我们将用 Taro 自带的路由功能实现多页面跳转，并用 Taro UI
        组件库升级之前略显简陋的界面。这一篇完成后的 DEMO 如下：


        ![](tuture-assets/taro-demo2.gif)


        如果你想直接从这一篇开始动手实践，那么请运行以下命令快速开始：


        ```bash

        git clone -b second-part https://github.com/tuture-dev/ultra-club.git

        cd ultra-club

        ```


        现在让我们开始实现项目的其他页面吧，包括：


        - 帖子详情 `post`：进入单篇帖子的详情页面

        - 我的 `mine`：显示当前用户的个人信息（在后面的步骤中将实现登录注册哦）


        其中，帖子详情页面中将复用前面编写的 `PostCard` 组件。为了方便管理，我们需要引入一个新的
        prop（`isList`），用于判断此组件是显示在首页列表中，还是在帖子详情页面中。



        ::: info

        **提示**


        项目中所需用到的图片可以从[这个链接](https://github.com/tuture-dev/ultra-club/releases/download/v0.0.1/images.zip)下载，下载后解压并将所有图片放到
        `src/images` 目录下。

        :::



        ### Taro 的路由功能


        路由功能是实现多页面应用的核心，幸运的是 Taro 已经自带了。具体而言，在 Taro 中实现页面跳转只需两个步骤：


        1. 在入口文件（`src/app.jsx`）中在 `App` 组件的 `config` 中配置之前提到的 `pages` 属性

        2. 在任意组件中通过 `Taro.navigateTo` 或 `Taro.redirectTo` 即可实现页面的跳转或重定向


        感觉不够直观？OK，我们直接撸起袖子写起来。
      post: |-
        ### 查看效果

        又到了激动人心的验收环节。我们应该能看到下面所示的效果：

        ![](tuture-assets/taro-demo2.gif)
  - name: 加速开发，Taro UI 帮帮忙
    commit: 63131b6
    diff:
      - file: config/index.js
        display: false
      - file: package.json
        display: false
      - file: src/components/PostForm/index.jsx
        display: true
        explain:
          pre: >-
            ### 升级 PostForm


            首先让我们升级 `PostForm` 组件。我们先尝鲜 Taro UI 的 `AtButton` 组件，替换掉之前 Taro 自带的
            `Taro` 组件：
          post: >
            注意到我们还把之前 `<View>添加新的帖子</View>` 去掉了，因为接下来我们会把表单放在浮动弹层 FloatLayout
            里面，所以就不需要这行提示啦。



            ::: info

            **提示**


            你也许会好奇为啥 Taro UI 的组件都以 `At` 开头？一个是为了与普通的 Taro 组件区分，另一个则是因为开发 Taro
            团队正是 [Aotu.io 凹凸实验室](https://aotu.io/)。

            :::
      - file: src/components/PostForm/index.scss
        display: true
        explain:
          pre: 调整 `PostForm` 组件的样式，代码如下：
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            正如之前所说，我们打算把创建新帖子的表单放在浮动弹层 FloatLayout 中。在首页模块
            `src/pages/index/index.jsx` 中导入相关组件，代码如下：
          post: >-
            我们来逐一分析新添加的代码：


            - 首先从 `taro-ui` 导入所需的 `AtFab`、`AtFloatLayout` 和 `AtMessage` 组件

            - 使用 `useState` Hook 创建新的状态 `isOpened`（用于记录浮动弹层是否打开）和用于修改状态的
            `setIsOpened`

            - 在 `handleSubmit` 中，用 `setIsOpened(false)` 关闭浮动弹层，并用
            `Taro.atMessage` 弹出提示消息

            - 在 `return` JSX 代码时，添加 `<AtMessage />` 组件，并在之前的 `PostForm` 组件外层包裹
            `AtFloatLayout` 组件，最后添加浮动按钮 `AtFab`
      - file: src/pages/index/index.scss
        display: true
        explain:
          pre: 在首页样式文件 `src/pages/index/index.scss` 中添加样式如下：
      - file: src/components/PostCard/index.jsx
        display: true
        explain:
          pre: >-
            ### 升级 PostCard


            接着我们来调整 `PostCard`
            在不同页面的样式。[classnames](https://www.npmjs.com/package/classnames)
            是最常用的 CSS 类组合库，可以让你用 JavaScript 表达式灵活地进行 CSS 类的组合。例如我们有三个 CSS 类
            `foo`、`bar` 和 `foo-bar`，可以通过 `classNames` 函数进行条件式组合：


            ```javascript

            import classNames from 'classnames`;


            classNames('foo', 'bar'); // => 'foo bar'

            classNames('foo', { bar: true }); // => 'foo bar'

            classNames({ 'foo-bar': true }); // => 'foo-bar'

            classNames({ 'foo-bar': false }); // => ''

            classNames({ foo: true }, { bar: true }); // => 'foo bar'

            classNames({ foo: true, bar: true }); // => 'foo bar'

            ```


            我们也新增加一个 CSS 类 `postcard__isList`，用于表示在帖子列表中的样式。修改
            `src/components/PostCard/index.jsx` 代码如下：
      - file: src/components/PostCard/index.scss
        display: true
        explain:
          pre: 修改 `PostCard` 组件的样式，代码如下：
      - file: src/custom-theme.scss
        display: true
        explain:
          pre: >-
            ### 定制主题颜色


            Taro UI
            支持一定程度的[主题定制](https://taro-ui.jd.com/#/docs/customizetheme)，这里我们采用最简单却也十分有效的
            **SCSS 变量覆盖**。我们创建 `src/custom-theme.scss`，代码如下：
          post: >
            可以看到，我们定义了三个 SCSS 变量 `$color-brand`、`$color-brand-light` 和
            `$color-brand-dark`，覆盖了 Taro UI 的默认主题色。



            ::: info

            **提示**


            欲查看所有可以覆盖的 SCSS 变量，请参考 Taro UI
            的[默认样式文件](https://github.com/NervJS/taro-ui/blob/dev/src/style/variables/default.scss)。如果不熟悉
            SCSS 变量，这份[指南](https://www.sass.hk/guide/)是不错的资料。

            :::
      - file: src/app.scss
        display: true
        explain:
          pre: 紧接着我们需要在项目的全局样式文件 `src/app.scss` 中导入自定义颜色主题文件，代码如下：
          post: >-
            可以看到，除了导入了刚刚创建的 `custom-theme.scss`，我们还**按需引入**了 Taro UI
            中所用到组件的样式，这样可以有效减少打包后应用体积的大小哦。
      - file: yarn.lock
    explain:
      pre: >
        在编写用户界面时，如果每次都要自己编写组件逻辑、调整组件样式，对于学习来说是完全可以的，但是对于实际开发任务就显得很麻烦了。在 React
        社区，我们有诸如 [Ant Design](https://github.com/ant-design/ant-design)
        这样的组件库，能够让我们快速搭建一套专业美观的界面。而 Taro 也提供了 [Taro
        UI](https://taro-ui.jd.com/#/) 组件库，为我们提供了能够适应多端的成熟组件。在这一步中，我们将用 Taro UI
        升级界面，让它看上去更像一个成熟的小程序。


        不过与之前不同，我们将先贴出完成这一步后的 demo 展示：


        ![](tuture-assets/taro-demo3.gif)


        可以看到我们做了三点改进：


        -
        通过点击一个[浮动按钮（Fab）](https://taro-ui.jd.com/#/docs/fab)来触发创建新文章的[浮动弹层（FloatLayout）](https://taro-ui.jd.com/#/docs/floatlayout)

        - 发布成功后，会显示一条温馨的[消息提示（Message）](https://taro-ui.jd.com/#/docs/message)

        - 帖子详情页面中 PostCard 组件去掉了边框，让它看上去更像正文展示


        ### 配置 Taro UI


        首先安装 Taro UI 的 npm 包：


        ```bash

        npm install taro-ui

        ```


        为了后续能在 H5 中使用 taro-ui，我们需要在 `config/index.js` 中添加如下配置：


        ```javascript

        h5: {
          esnextModules: ['taro-ui']
        }

        ```
      post: >-
        完成这一步的代码后，记得在模拟器里面看看运行起来是不是跟开头的 GIF demo 效果完全一致哦！


        至此，《Taro
        多端小程序开发大型实战》第二篇也就结束啦。欢迎继续阅读[第三篇](https://tuture.co/2019/12/25/af69225/5e10118/)，我们将手把手带大家用实现如何在
        Taro 框架下实现多端登录（微信小程序 + 支付宝小程序 + 普通登录）。
  - name: 多端登录，群魔乱舞
    commit: 1da2fee
    diff:
      - file: config/index.js
        display: true
        explain:
          pre: >-
            #### 配置 Babel 插件


            从这一步开始，我们将首次开始写异步代码。本项目将采用流行的 async/await 来编写异步逻辑，因此我们配置一下相应的 Babel
            插件：


            ```bash

            npm install babel-plugin-transform-runtime --save-dev

            # yarn add babel-plugin-transform-runtime -D

            ```


            然后在 `config/index.js` 中为 `config.babel.plugins` 添加相应的配置如下：
      - file: package.json
        display: false
      - file: src/components/LoginButton/index.js
        display: true
        explain:
          pre: >-
            ### 各组件的实现


            #### 实现 LoginButton


            首先，我们来实现普通登录按钮 `LoginButton` 组件。创建 `src/components/LoginButton`
            目录，在其中创建 `index.js`，代码如下：
          post: 我们使用了 Taro UI 的 `AtButton` 组件，并定义了一个 `handleClick` 事件，后面在使用时会传入。
      - file: src/components/WeappLoginButton/index.js
        display: true
        explain:
          pre: >-
            #### 实现 WeappLoginButton


            接着我们实现微信登录按钮 `WeappLoginButton`。创建 `src/components/WeappLoginButton`
            目录，在其中分别创建 `index.js` 和 `index.scss`。`index.js` 代码如下：
          post: >-
            可以看到，微信登录按钮和之前的普通登录按钮多了很多东西：


            - 添加了 `isLogin` 状态，用于表示是否在等待登录中，以及修改状态的 `setIsLogin` 函数

            - 实现了 `onGetUserInfo` async
            函数，用于处理在用户点击登录按钮、获取到信息之后的逻辑。其中，我们将获取到的用户信息传入 `props` 中的
            `setLoginInfo`，从而修改整个应用的登录状态

            - 添加了 `openType`（微信开放能力）属性，这里我们输入的是 `getUserInfo`（获取用户信息），欲查看所有支持的
            open-type，请查看[微信开放文档对应部分](https://developers.weixin.qq.com/miniprogram/dev/component/button.html)

            - 添加了 `onGetUserInfo` 这个 handler，用于编写在获取到用户信息后的处理逻辑，这里就是传入刚刚实现的
            `onGetUserInfo`
      - file: src/components/WeappLoginButton/index.scss
        display: true
        explain:
          pre: '`WeappLoginButton` 的样式 `index.scss` 代码如下：'
      - file: src/components/AlipayLoginButton/index.js
        display: true
        explain:
          pre: >-
            #### 实现 AlipayLoginButton


            让我们来实现支付宝登录按钮组件。创建 `src/components/AlipayLoginButton` 目录，在其中分别创建
            `index.js` 和 `index.scss`。`index.js` 代码如下：
          post: >
            可以看到，内容与之前的微信登录按钮基本相似，但是有以下差别：


            - 实现 `onGetAuthorize` 回调函数。与之前微信的回调函数不同，这里我们要调用
            `Taro.getOpenUserInfo` 手动获取用户基础信息（实际上调用的是支付宝开放平台
            [my.getOpenUserInfo](https://docs.alipay.com/mini/api/ch8chh)）

            - `Button` 组件的 `openType`（支付宝开放能力）设置成 `getAuthorize`（小程序授权）

            - 在设定开放能力为 `getAuthorize` 时，需要添加 `scope` 属性为
            `userInfo`，让用户可以授权小程序获取支付宝会员的基础信息（另一个有效值是 `phoneNumber`，用于获取手机号码）

            - 传入 `onGetAuthorize` 回调函数


            ::: info

            **提示**


            关于支付宝小程序登录按钮的细节，可以查看[官方文档](https://docs.alipay.com/mini/component/button)。

            :::
      - file: src/components/AlipayLoginButton/index.scss
        display: true
        explain:
          pre: 样式文件 `index.scss` 的代码如下：
      - file: src/components/LoggedMine/index.jsx
        display: true
        explain:
          pre: >-
            #### 实现 LoggedMine


            接着我们实现已经登录状态下的 `LoggedMine` 组件。创建 `src/components/LoggedMine`
            目录，在其中分别创建 `index.jsx` 和 `index.scss`。`index.jsx` 代码如下：
          post: >-
            这里我们添加了点击头像可以预览的功能，可以通过 [`Taro.previewImage`
            函数](https://nervjs.github.io/taro/docs/apis/multimedia/images/previewImage.html#docsNav)实现。
      - file: src/components/LoggedMine/index.scss
        display: true
        explain:
          pre: '`LoggedMine` 组件的样式文件如下：'
      - file: src/components/Header/index.js
        display: true
        explain:
          pre: >-
            #### 实现 Header 组件


            在所有的“小零件”全部实现后，我们就实现整个登录界面的 `Header` 部分。创建 `src/components/Header`
            目录，在其中分别创建 `index.js` 和 `index.scss`。`index.js` 代码如下：
          post: >
            可以看到，我们根据 `Taro.ENV_TYPE` 查询当前所在的平台（微信、支付宝或其他），然后确定是否显示相应平台的登录按钮。



            ::: info

            **提示**


            你也许发现了，`setLoginInfo` 还是要等待父组件的传入。虽然 Hooks
            简化了状态的定义和更新方式，但是却没有简化跨组件修改状态的逻辑。在接下来的一步，我们将用 Redux 进行简化。

            :::
      - file: src/components/Header/index.scss
        display: true
        explain:
          pre: '`Header` 组件的样式代码如下：'
      - file: src/components/LoginForm/index.jsx
        display: true
        explain:
          pre: >-
            #### 实现 LoginForm


            接着我们实现用于普通登录的 `LoginForm` 组件。由于本系列教程的目标是讲解
            Taro，因此这里简化了注册/登录的流程，用户可以直接输入用户名并上传头像进行注册/登录，无需设置密码和其他验证过程。创建
            `src/components/LoginForm` 目录，在其中分别创建 `index.jsx` 和
            `index.scss`。`index.jsx` 代码如下：
          post: >-
            这里我们使用 Taro UI 的 [ImagePicker
            图片选择器组件](https://taro-ui.jd.com/#/docs/imagepicker)，让用户能够选择图片进行上传。`AtImagePicker`
            最重要的属性就是 `onChange` 回调函数，这里我们通过父组件传进来的 `handleFilesSelect` 函数来搞定。
      - file: src/components/LoginForm/index.scss
        display: true
        explain:
          pre: '`LoginForm` 组件的样式代码如下：'
      - file: src/components/Logout/index.js
        display: true
        explain:
          pre: |-
            #### 实现 Logout

            在登录之后，我们还需要退出登录的按钮。创建 `src/components/Logout/index.js` 文件，代码如下：
      - file: src/components/Footer/index.js
        display: true
        explain:
          pre: >-
            #### 实现 Footer


            所有的子组件全部实现之后，我们就来实现 `Footer` 组件。创建 `src/components/Footer`
            目录，在其中分别创建 `index.jsx` 和 `index.scss`。`index.jsx` 代码如下：
      - file: src/components/Footer/index.scss
        display: true
        explain:
          pre: '`Footer` 组件的样式文件代码如下：'
      - file: src/components/index.jsx
        display: true
        explain:
          pre: >-
            所有小组件都搞定之后，我们在 `src/components` 中只需暴露出 `Header` 和 `Footer`。修改
            `src/components/index.jsx`，代码如下：
      - file: src/pages/mine/mine.jsx
        display: true
        explain:
          pre: >-
            ### 更新“我的”页面


            是时候用上写好的 `Header` 和 `Footer` 组件了，但在此之前，我们先来讲一下我们需要用到的 `useEffect`
            Hooks。


            #### useEffect Hooks


            `useEffect` Hooks 是用来替代原 React 的生命周期钩子函数的，我们可以在里面发起一些 “副作用”
            操作，比如异步获取后端数据、设置定时器或是进行 DOM 操作等：


            ```JavaScript

            import React, { useState, useEffect } from 'react';


            function Example() {
              const [count, setCount] = useState(0);

              // 和 componentDidMount 以及 componentDidUpdate 类似:
              useEffect(() => {
                // 使用浏览器 API 更新 document 的标题
                document.title = `你点击了 ${count} 次`;
              });

              return (
                <div>
                  <p>你点击了 {count} 次</p>
                  <button onClick={() => setCount(count + 1)}>
                    点我
                  </button>
                </div>
              );
            }

            ```


            上面的对 `document` 标题的修改是具有副作用的操作，在之前的 React 应用中，我们通常会这么写：


            ```JavaScript

            class Example extends React.Component {
              constructor(props) {
                super(props);
                this.state = {
                  count: 0
                };
              }

              componentDidMount() {
                document.title = `你点击了 ${this.state.count} 次`;
              }

              componentDidUpdate() {
                document.title = `你点击了 ${this.state.count} 次`;
              }

              render() {
                return (
                  <div>
                    <p>你点击了 {this.state.count} 次</p>
                    <button onClick={() => this.setState({ count: this.state.count + 1 })}>
                      点我
                    </button>
                  </div>
                );
              }
            }

            ```


            如果你想了解 `useEffect` 具体的详情，可以去查看 React
            的[官方文档](https://zh-hans.reactjs.org/docs/hooks-effect.html)。


            做的好！了解了 `useEffect` Hooks 的概念之后，我们马上来更新“我的”页面组件
            `src/pages/mine/mine.jsx`，代码如下：
          post: >-
            可以看到，我们做了这么些工作：


            - 使用 `useState` 创建了四个状态：用户有关信息（`nickName` 和
            `avatar`），登录弹出层是否打开（`isOpened`），是否登录成功（`isLogged`），以及相应的更新函数

            - 通过 `useEffect` Hook
            尝试从本地缓存中获取用户信息（[Taro.getStorage](https://nervjs.github.io/taro/docs/apis/storage/getStorage.html#docsNav)），并用来更新
            `nickName` 和 `avatar` 状态

            - 实现了久违的 `setLoginInfo` 函数，其中我们不仅更新了 `nickName` 和 `avatar`
            的状态，还把用户数据存入本地缓存（[Taro.getStorage](https://nervjs.github.io/taro/docs/apis/storage/setStorage.html#docsNav)），确保下次打开时保持登录状态

            - 实现了同样久违的 `handleLogout`
            函数，其中不仅更新了相关状态，还去掉了本地缓存中的数据（[Taro.removeStorage](https://nervjs.github.io/taro/docs/apis/storage/removeStorage.html#docsNav)）

            - 实现了用于处理普通登录的 `handleSubmit` 函数，内容基本上与 `setLoginInfo` 一致

            - 在返回 JSX 代码时渲染 `Header` 和 `Footer` 组件，传入相应的状态和回调函数
      - file: src/pages/mine/mine.scss
        display: true
        explain:
          pre: 调整 `Mine` 组件的样式 `src/pages/mine/mine.scss` 代码如下：
      - file: src/app.scss
        display: true
        explain:
          pre: 最后在 `src/app.scss` 中引入相应的 Taro UI 组件的样式：
      - file: yarn.lock
    explain:
      pre: >-
        欢迎继续阅读《Taro 小程序开发大型实战》系列，前情回顾：


        - [熟悉的 React，熟悉的 Hooks](https://tuture.co/2019/12/25/34a473b/)：我们用 React
        和 Hooks 实现了一个非常简单的添加帖子的原型

        - [多页面跳转和 Taro UI 组件库](https://tuture.co/2019/12/25/af69225/)：我们用 Taro
        自带的路由功能实现了多页面跳转，并用 Taro UI 组件库升级了应用界面


        而在这一篇中，我们将实现微信和支付宝多端登录。如果你希望直接从这一篇开始，请运行以下命令：


        ```bash

        git clone -b third-part https://github.com/tuture-dev/ultra-club.git

        cd ultra-club

        ```


        与普通的 Web
        应用相比，小程序能够在所在的平台实现一键登录，非常方便。这一步，我们也将实现多端登录（主要包括微信登录和支付宝登录）。之所以标题取为“群魔乱舞”，不仅受了“震惊”小编们的启发，也是因为当今各平台处理登录和鉴权的方式差异很大，很遗憾的是在
        Taro 框架下我们依然需要踩很多“坑”才能真正实现“多端登录”。


        ### 准备工作


        #### 前提条件


        在正式开始之前，我们希望你已经具备以下知识：


        - 基本的 React 框架知识，可参考[这篇文章](https://tuture.co/2019/11/18/07acf61/)进行学习

        - 对常用的 React Hooks （`useState`、`useEffect`）有所了解，后面图雀社区将推出 “一杯茶的时间，上手
        React Hooks”，敬请期待！


        *除此之外，你还需要下载并安装[支付宝开发者工具](https://docs.alipay.com/mini/ide/download)，登录后创建自己的小程序
        ID。*


        #### 组件设计规划


        这一节的代码很长，在正式开始之前我们先查看一下组件设计的规划，便于你对接下来我们要做的工作有清晰的了解。


        ![](tuture-assets/components.png)


        可以看到“我的”页面整体拆分成了 `Header` 和 `Footer`：


        - `Header` 包括 `LoggedMine`（个人信息），如果在未登录状态下则还有
        `LoginButton`（普通登录按钮）、`WeappLoginButton`（微信登录按钮，仅在微信小程序中出现）以及
        `AlipayLoginButton`（支付宝登录按钮，仅在支付宝小程序中出现）

        - `Footer` 则用来显示是否已登录的文字，在已登录的情况下会显示 `Logout`（退出登录按钮）
      post: >-
        ### 查看效果


        敲了这么多代码，终于又到了神圣的验收环节。首先是普通登录：


        ![](tuture-assets/taro-demo4.gif)


        而微信和支付宝登录，点击之后就会直接以登录开发者工具所用的帐号登录了。下面贴出我微信和支付宝登录后的界面展示：


        ![](tuture-assets/logged-squashed.jpg)


        登录后点击下方的“退出登录”按钮，就会将当前登录帐户注销哦。


        至此，《Taro
        多端小程序开发大型实战》第三篇也就结束啦。在接下来的[第四篇](https://tuture.co/2019/11/28/5e100f7/)中，我们将逐步用
        Redux 来重构业务数据流，让我们现在略显臃肿的状态管理变得清晰可控。
  - name: 双剑合璧：Hooks + Redux
    commit: a3cf715
    diff:
      - file: package.json
        display: true
        explain:
          pre: >-
            ### 安装依赖


            首先我们先来安装使用 Redux 必要的依赖：


            ```Bash

            $ yarn add redux @tarojs/redux @tarojs/redux-h5  redux-logger

            # 或者使用 npm

            $ npm install --save redux @tarojs/redux @tarojs/redux-h5
            redux-logger

            ```
          post: >-
            可以看到，除了我们熟悉的 `redux` 依赖，以及用来打印 Action 的中间件 `redux-logger`
            外，还有两个额外的包，这是因为在 Taro 中，Redux 原绑定库 `react-redux` 被替换成了
            `@tarojs/redux` 和 `@tarojs/redux-h5`，前者用在小程序中，后者用在 H5 页面中，Taro 对原
            `react-redux` 进行了封装并提供了与 react-redux API 几乎一致的包来让开发人员获得更加良好的开发体验。
      - file: src/store/index.js
        display: true
        explain:
          pre: >-
            ### 创建 Redux Store


            Redux 的三大核心概念为：Store，Action，Reducers：


            - Store：保存着全局的状态，有着 ”数据的唯一真相来源之称“。

            - Action：发起修改 Store 中保存状态的动作，是修改状态的唯一手段。

            - Reducers：一个个的纯函数，用于响应 Action，对 Store 中的状态进行修改。


            好的，复习了一下 Redux 的概念之后，我们马上来创建 Store，Redux 的最佳实践推荐我们在将 Store 保存在
            `store` 文件夹中，我们在 `src` 文件夹下面创建 `store` 文件夹，并在其中创建 `index.js` 来编写我们的
            Store：
          post: >+
            可以看到，我们导出了一个 `configureStore` 函数，并在其中创建并返回 Store，这里我们用到了
            `redux-logger` 中间件，用于在发起 Action 时，在控制台打印 Action 及其前后 Store
            中的保存的状态信息。


            这里我们的 `createstore` 接收两个参数：`rootReducer` 和
            `applyMiddleware(...middlewares)` 。


            `rootReducer` 是响应 `action` 的 `reducer`，这里我们导出了一个
            `rootReducer`，代表组合了所有的 `reducer` ，我们将在后面 "组合 User 和 Post Reducer“
            中讲到它。


            `createStore` 函数的第二个参数我们使用了 `redux` 为我们提供的工具函数 `applyMiddleware` 来在
            Redux 中注入需要使用的中间件，因为它接收的参数是 `(args1, args2, args3, ..., argsn)`
            的形式，所以这里我们用了数组展开运算符 `...` 来展开 `middlewares` 数组。


      - file: src/reducers/user.js
        display: true
        explain:
          pre: >-
            ### 编写 User Reducer


            创建完 Store 之后，我们接在来编写 Reducer。回到我们的页面逻辑，我们在底部有两个 Tab 栏，一个为 "首页"，一个为
            "我的"，在 ”首页“ 里面主要是展示一列文章和允许添加文章等，在 ”我的“
            里面主要是允许用户进行登录并展示登录信息，所以整体上我们的逻辑有两类，我们分别将其命名为 `post` 和
            `user`，接下来我们将创建处理这两类逻辑的 reducers。


            Reducer 的逻辑形如 `(state, action) => newState`，即接收上一步 state 以及修改 state
            的动作 action，然后返回修改后的新的 state，它是一个纯函数，意味着我们不能突变的修改  state。


            推荐：


            ```JavaScript

            newState = { ...state, prop: newValue }

            ```


            不推荐：


            ```JavaScript

            state.prop = newValue

            ```


            Redux 推荐的最佳实践是创建独立的 `reducers` 文件夹，在里面保存我们的一个个 reducer 文件。我们在 `src`
            文件夹下创建 `reducers` 文件夹，在里面创建 `user.js` 文件，并加入我们的 User Reducer
            相应的内容如下：
          post: >
            我们在 `user.js`  中申明了 User Reducer 的初始状态 `INITIAL_STATE`，并将它赋值给 `user`
            函数 state 的默认值，它接收待响应的 action，在 `user` 函数内部就是一个 `switch` 语句根据
            `action.type` 进行判断，然后执行相应的逻辑，这里我们主要有两个类型：`SET_IS_OPENED` 用于修改
            `isOpened` 属性，`SET_LOGIN_INFO` 用于修改 `avatar` 和 `nickName` 属性，当
            `switch` 语句中没有匹配到任何 `action.type` 值时，它返回原 state。



            ::: info

            **提示**


            根据 Redux 最近实践，这里的 `SET_IS_OPENED` 和 `SET_LOGIN_INFO` 常量一般保存到
            `constants` 文件夹中，我们将马上创建它。这里使用常量而不是直接硬编码字符串的目的是为了代码的可维护性。

            :::
      - file: src/constants/user.js
        display: true
        explain:
          pre: >-
            接下来我们来创建 `src/reducer/user.js` 中会用到的常量，我们在 `src`  文件夹下创建 `constants`
            文件夹，并在其中创建 `user.js` 文件，在其中添加内容如下：
      - file: src/reducers/post.js
        display: true
        explain:
          pre: >-
            ### 编写 Post Reducer


            为了响应 `post` 逻辑的状态修改，我们创建在 `src/reducers` 下创建
            `post.js`，并在其中编写相应的内容如下：
          post: "可以看到，\_Post Reducer 的形式和 User Reducer 类似，我们将之前需要多组件中共享的状态 `posts` 和 `isOpened` 提取出来保存在 `post` 的状态里，这里的 `post` 函数主要响应 `SET_POSTS` 逻辑，用于添加新的 `post` 到 `posts` 状态种，以及 `SET_POST_FORM_IS_OPENED` 逻辑，用户设置 `isOpened` 状态。"
      - file: src/constants/post.js
        display: true
        explain:
          pre: >-
            接下来我们来创建 `src/reducer/post.js` 中会用到的常量，我们在 `src/constants`  文件夹下创建
            `user.js` 文件，在其中添加内容如下：
          post: ''
      - file: src/constants/index.js
        display: true
        explain:
          pre: >-
            眼尖的同学可能注意到了，我们在 `src/reducers/user.js` 和 `src/reducers/post.js`
            中导入需要使用的常量时都是从 `../constants`  的形式，那是因为我们在 `src/constants` 文件夹下创建了一个
            `index.js` 文件，用于统一导出所有的常量，这也是代码可维护性的一种尝试。
      - file: src/reducers/index.js
        display: true
        explain:
          pre: >-
            ### 组合 User 和 Post Reducer


            我们在之前将整个全局的响应逻辑分别拆分到了 `src/reducers/user.js` 和
            `src/reducers/post.js` 中，这使得我们可以把响应逻辑拆分到很多个很小的函数单元，极大增加了代码的可读性和可维护性。


            但最终我们还是要将这些拆分的逻辑组合成一个逻辑树，并将其作为参数传给 `createStore` 函数来使用。


            Redux 为我们提供了 `combineReducers` 来组合这些拆分的逻辑，我们在 `src/reducers` 文件夹下创建
            `index.js` 文件，并在其中编写如下内容：
          post: "可以看到，我们导入了 `user.js` 和 `post.js`，并使用对象简介写法传给 `combineReducers` 函数并导出，通过 `combineReducers` 将逻辑进行组合并导出为 `rootReducer` 作为参数在我们的 `src/store/index.js` 的 `createStore` 函数中使用。\n\n这里的 `combineReducers` 函数主要完成两件事：\n\n- 组合 user Reducer 和 post Reducer 中的状态，并将其合并成一颗形如 `{ user, post }` 的状态树，其中 `user` 属性保存这 user Reducer 的状态，`post` 属性保存着 post Reducer 的状态。\n- 分发 Action，当组件中 `dispatch`  一个 Action，\_`combineReducers` 会遍历 user Reducer 和 post Reducer，当匹配到任一 Reducer 的 `switch` 语句时，就会响应这个 Action。\n\n\n::: info\n**提示**\n\n我们将马上在之后讲解如何在组件中 `dispatch` Action。\n:::\n \n\n"
      - file: project.config.json
        display: false
      - file: src/app.jsx
        display: true
        explain:
          pre: >-
            ### 整合 Redux 和 React


            当我们编写了 reducers 创建了 store 之后，下一步要考虑的就是如何将 Redux 整合进 React，我们打开
            `src/app.js`，对其中的内容作出如下修改：
          post: >-
            可以看到，上面的内容主要修改了三部分：


            - 我们导入了 `configureStore`，并调用它获取 `store`。

            - 接着我们从 Redux 对应的 Taro 绑定库 `@tarojs/redux` 中导出 `Provider`，它架设起 Redux
            和 React 交流的桥梁。

            - 最后我们用 `Provider` 包裹我们之前的根组件，并将 `store` 作为其属性传入，这样后续的组件就可以通过获取到
            `store` 里面保存的状态。
      - file: src/components/LoginButton/index.js
        display: true
        explain:
          pre: >+
            ### Hooks 版的 Action 初尝鲜


            准备好了 Store 和 Reducer，又整合了 Redux 和 React，是时候来体验一下 Redux
            状态管理容器的先进性了，不过为了使用 Hooks 版本的 Action，这里我们先来讲一讲会用到的 Hooks。


            #### useDispatch Hooks


            这个 Hooks 返回 Redux store 的 `dispatch` 引用。你可以使用它来 dispatch actions。


            讲完  useDispatch Hooks，我们马上来实践一波，首先搞定我们 ”普通登录“ 的 Redux 化问题，让我们打开
            `src/components/LoginButton/index.js`，对其中内容作出相应的修改如下：

          post: >-
            可以看到，上面的内容主要有四块改动：


            - 首先我们从 `@tarojs/redux` 中导出 `useDispatch` API。

            - 接着我们从之前定义的常量文件中导出 `SET_IS_OPENED` 常量。

            - 然后，我们在 `LoginButton` 函数式组件中调用 `useDispatch` Hooks 来返回我们的
            `dispatch` 函数，我们可以用它来 dispatch action 来修改 Redux store 的状态

            - 最后我们将 `AtButton` 的 `onClick` 接收的回调函数进行替换，当按钮点击时，我们发起一个 `type` 为
            `SET_IS_OPENED` 的 action，并传递了一个 `payload` 参数，用于将 Redux store 里面对应的
            `user` 属性中的 `isOpened` 修改为 `true`。
      - file: src/components/WeappLoginButton/index.js
        display: true
        explain:
          pre: >-
            搞定完 ”普通登录“，我们接着来收拾一下 ”微信登录“ 的逻辑，打开
            `src/components/WeappLoginButton/index.js` 文件，对文件的内容作出如下修改：
          post: >-
            可以看到，上面的改动和之前在 ”普通登录“ 里面的改动类似：


            - 我们导出了 `useDispatch` 钩子

            - 导出了 `SET_LOGIN_INFO` 常量

            - 然后我们将之前调用父组件传下的 `setLoginInfo`  方法改成了 dispatch `type` 为
            `SET_LOGIN_INFO` 的 action，因为我们的 `avatar` 和 `nickName` 状态已经在 `store`
            中的 `user` 属性中定义了，所以我们修改也是需要通过 dispatch action 来修改，最后我们将之前定义在父组件中的
            `Taro.setStorage` 设置缓存的方法移动到了子组件中，以保证相关信息的改动具有一致性。
      - file: src/components/AlipayLoginButton/index.js
        display: true
        explain:
          pre: >-
            最后我们来搞定 ”支付宝登录“ 的 Redux 逻辑，打开
            `src/components/AlipayLoginButton/index.js` 对文件内容作出对应的修改如下：
          post: '可以看到，上面的改动和之前在 ”微信登录“ 里面的改动几乎一样，所以这里我们就不在重复讲解啦 :)'
      - file: src/components/LoggedMine/index.jsx
        display: true
        explain:
          pre: >-
            ### useSelector Hooks 来捧场


            一路跟下来的同学可能有点明白我们正在使用 Redux 我们之前的代码，而我们重构的思路也是先从
            `src/pages/mine/mine.jsx` 中的 `src/components/Header/index.jsx`
            开始，搞定完 `Header.jsx` 里面的所有登录按钮之后，接下来应该就轮到 `Header.jsx` 内的最后一个组件
            `src/components/LoggedMine/index.jsx`  了。


            因为在 `LoggedMine` 组件中我们要用到 useSelector Hooks，所以这里我们先来讲一下这个 Hooks。


            #### useSelector Hooks


            `useSelector` 允许你使用 selector 函数从一个 Redux Store 中获取数据。


            Selector 函数大致相当于 `connect` 函数的 `mapStateToProps` 参数。Selector
            会在组件每次渲染时调用。`useSelector` 同样会订阅 Redux store，在 Redux action 被
            dispatch 时调用。


            但 `useSelector` 还是和 `mapStateToProps` 有一些不同：


            - 不像 `mapStateToProps` 只返回对象一样，Selector 可能会返回任何值。

            - 当一个 action dispatch 时，`useSelector` 会把 selector
            的前后返回值做一次浅对比，如果不同，组件会强制更新。

            - Selector 函数不接受 `ownProps` 参数。但 selector 可以通过闭包访问函数式组件传递下来的 props。


            好的，了解了 `useSelector` 的概念之后，我们马上来实操一下，打开
            `src/components/LoggedMine/index.jsx` 文件，对其中的内容作出如下的修改：
          post: >-
            可以看到，我们上面的代码主要有四处改动：


            - 首先我们从 `@tarojs/redux` 中导出了  `useSelector` Hooks。

            - 接着我们使用了两次 `useSelector` 分别从 Redux Store 里面获取了 `nickName` 和
            `avatar`，它们位于 `state.user` 属性下。

            - 接着我们将之前从 `props` 里面获取到的 `nickName` 和 `avatar` 替换成我们从 Redux store
            里面获取到状态，这里我们为了用户体验，从 `taro-ui` 中导出了一个 `AtAvatar` 组件用于展示在没有 `avatar`
            时的默认头像。

            - 最后，在点击头像进行预览的 `onImageClick` 方法里面，我们使用从 Redux store 里面获取到的
            `avatar`。
      - file: src/components/Header/index.js
        display: true
        explain:
          pre: >-
            是时候收割最后一波 ”韭菜“ 了，让我们彻底完成 `Header/index.js` 的 Redux 化，打开
            `src/components/Header/index.js` ，对其中的内容做出相应的修改如下：
          post: >-
            可以看到，上面的代码主要有五处主要的变动：


            - 首先我们导出了 `useSelector` Hooks。

            - 接着我们使用 `useSelector` 中取到我们需要的 `nickName` 属性，用于进行双取反转换成布尔值
            `isLogged`，表示是否登录。

            - 接着我们将之前从父组件获取的 `props.isLogged` 属性替换成新的从 `isLogged` 值

            - 接着，我们去掉 ”普通登录” 按钮上不再需要的 `handleClick` 属性和 “微信登录”、“支付宝登录” 上面不再需要的
            `setLoginInfo` 属性。

            - 最后，我们去掉 `LoggedMine` 组件上不再需要的 `userInfo` 属性，因为我们已经在组件内部从使用
            `useSelector` Hooks 从组件内部获取了。
      - file: src/components/Logout/index.js
        display: true
        explain:
          pre: >-
            ### 搞定 Footer 的 Redux 化


            本来这个小标题我是不想起的，但是因为，是吧，大家上面在没有小标题的情况下看了这么久，可能已经废（累）了，所以我就贴心的加上一个小标题，帮助你定位接下来讲解的重心。


            是的接下来，我们要重构 “我的" tab 页面中的下半部分组件 `src/components/Footer/index.js`
            我们遵循自顶向下的方式来重构，首先是 `src/components/Logout/index.js`
            文件，我们打开这个文件，对其中内容作出如下修改：
          post: >
            这一步可能是最能体现引入 Redux 进行状态管理带来好处的一步了 -- 我们将之前至上而下的 React
            状态管理逻辑压平，使得底层组件可以在自身中就解决响应的状态和逻辑问题。


            可以看到，我们上面的文件中主要有五处改动：


            - 首先我们从 `@tarojs/taro` 里面导出 `useState` Hooks。

            - 接着我们将之前在 `src/pages/mine/mine.js` 中定义的 `isLogout` 状态移动到组件 `Logout`
            组件内部来，因为它只和此组件有关系。

            - 接着我们用 `isLogout` 替换在 `AtButton` 里面用到的 `props.loading` 属性。

            - 然后，我们考虑将之前按钮点击调用 `props.handleLogout` Redux 化，我们将这个点击之后的回调函数
            `handleLogout` 在组件内部定义。

            - 最后，我们从 `@tarojs/redux` 中导入 `useDispatch` Hooks，并在组件中调用成我们需要的
            `dispatch` 函数，接着我们在 `handleLogout` 函数中去 dispatch 一个 `SET_LOGIN_INFO`
            action 来重置 Store 中的 `nickName` 和 `avatar` 属性。



            ::: info

            **提示**


            这里我们在组件内定义的 `handleLogout` 函数和我们之前在 `src/pages/mine/mine.js`
            中定义的类似，只是使用  dispatch action 的方式替换了重置 `nickName` 和 `avatar` 的部分。

            :::
      - file: src/components/LoginForm/index.jsx
        display: true
        explain:
          pre: |-
            搞定完 `Logout` 组件，接着就是 `LoginForm` 组件的重构了，让我们快马加鞭，让它也接受 Redux 光环的洗礼吧！

            打开 `src/components/LoginForm/index.jsx` ，对其中的内容作出相应的修改如下：
          post: "这一步和上一步类似，可能也是最能体现引入 Redux 进行状态管理带来好处的一步了，我们同样将之前在顶层组件中提供的状态压平到了底层组件内部。\n\n可以看到，我们上面的文件中主要有四处改动：\n\n- 首先我们将 `formNickName` 和 `files` 等状态放置到 `LoginForm` 组件内部，并使用 `useState` Hooks 管理起来，因为它们只和此组件有关系。\n- 接着，我们将 `AtImagePicker` 里面的 `props.files` 替换成 `files`，将它的 `onChange` 回调函数内部的设置改变状态的 `props.handleFilesSelect(files)` 替换成 `setFiles(files)`。可以看到这里我们还对 `files.length = 0` 的形式做了一个判断，当没有选择图片时，要把我们选择图片的按钮显示出来。\n- 接着，我们将 `Input` 组件的 `props.formNickName` 替换成 `formNickName`，将之前 `onInput` 接收的回调函数换成了 `setFormNickName` 的形式来设置 `formNickName` 的变化。\n- 接着，我们将之前提交表单需要调用的父组件方法 `props.handleSubmit` 移动到组件内部来定义，可以看到，这个 `hanldeSubmit` 组合了之前在 `src/components/Footer/index.jsx` 和 `src/pages/mine/mine.js` 组件里的 `handleSubmit` 逻辑：\n  -  首先使用 `e.preventDefault` 禁止浏览器默认行为。\n  - 接着进行数据验证，不合要求的数据就会被驳回并显示错误（其实这里应该显示警告 `warning`，当时写代码时石乐志\U0001F605）。\n  - 接着因为 `LoginForm` 表单数据要被清除，所以我们将选中图片的按钮又设置为可显示状态。\n  - 接着提示登录成功。\n  - 清空表单状态。\n  - 将登录数据缓存在 `storage` 里面，在 Taro 里面使用 `Taro.setStorage({ key, data })` 的形式来缓存，其中 `key` 是字符串，`data` 是字符串或者对象。\n   - 最后我们导出了 `useDispatch` Hooks，使用 `useDispatch` Hooks 生成的 `dispatch` 函数的引用来发起更新 Redux store 的 action 来更新本地数据，`type` 为 `SET_LOGIN_INFO` 的 action 用来更新用户登录信息，`type` 为 `SET_IS_OPENED` 的 action 用来更新 `isOpened` 属性，它将关闭展示登录框的弹出层 `FloatLayout` 组件。\n"
      - file: src/components/Footer/index.js
        display: true
        explain:
          pre: >-
            讲到这里，我们的 `Footer` 部分的重构大业还剩下临门一脚了。让我们打开
            `src/components/Footer/index.js` 文件，立马来重构它：
          post: >-
            可以看到上面的代码主要有五处改动：


            - 首先我们已经将 `nickName` 抽取到 Redux store 保存的状态中，所以之前从父组件获取的
            `props.isLogged` 判断是否登录的信息，我们移动到组件内部来，使用 `useSelector` Hooks 从 Redux
            store 从获取 `nickName` 属性，进行双取反操作成布尔值来表示是否已经登录的 `isLogged`
            属性，并使用它来替换之前的 `props.isLogged` 属性。

            - 接着，就是取代之前从父组件获取的 `props.isOpened` 属性，我们使用 `useSelector` Hooks 从
            Redux store 中获取对应的 `isOpened` 属性，然后替换之前的
            `props.isOpened`，用户控制登录框窗口的弹出层 `AtFloatLayout` 的打开和关闭。

            - 接着，我们将之前 `AtFloatLayout` 关闭时（`onClose`）的回调函数替换成 dispatch 一个 `type`
            为 `SET_IS_OPENED` 的 action 来设置 `isOpened` 属性将 `AtFloatLayout` 关闭。

            - 接着，我们开始移除 `Logout` 和 `LoginForm`
            组件上不再需要传递的属性，因为在对应的组件中我们已经声明了对应的属性了。

            - 最后，我们删掉之前定义在 `Footer` 组件内的 `formNickName` 和 `files` 等状态，以及不再需要的
            `handleSubmit` 函数，因为它已经在 `LoginForm` 里面定义了。
      - file: src/pages/mine/mine.jsx
        display: true
        explain:
          pre: "### 完成 “我的” 页面重构\n\n熟悉套路的同学可能都知道起这个标题的含义了吧 \U0001F60F。\n\n我们一路打怪重构到这里，相比眼尖的人已经摸清楚 Redux 的套路了，结合 Redux 来写 React 代码，就好比 “千里之堤，始于垒土” 一般，我们先把所有细小的分支组件搞定，进而一步一步向顶层组件进发，以完成所有组件的编写。\n\n而这个 `src/pages/mine/mine.jsx` 组件就是 “我的” 这一 tab 页面的顶层组件了，也是我们在 “我的” 页面需要重构的最后一个页面了，是的，我们马上就要达到第一阶段性胜利了✌️。现在就打开这个文件，对其中的内容作出如下的修改："
          post: "可以看到，上面的代码做了一下五处改动：\n\n- 我们导入了 `useDispatch` Hooks 和 `SET_LOGIN_INFO` 常量，并把之前在 `getStorage` 方法里面设置 `nickName` 和 `avatar` 的操作替换成了 dispatch 一个 `type` 为 `SET_LOGIN_INFO` 的 action。\n- 接着我们删除不再需要的 `formNickName`、`files`、`isLogout`、`isOpened` 状态，以及 `setLoginInfo`、`handleLogout`、`handleSetIsOpened`、`handleClick` 、`handleSubmit` 方法。\n- 最后我们删除 `Header` 和 `Footer` 组件上不再不需要的属性。\n\n\n大功告成\U0001F948！这里给你颁发一个银牌，以奖励你能一直坚持阅读并跟到这里，我们这一篇教程很长很长，能跟下来的都不容易，希望你能在心里或用实际行动给自己鼓鼓掌\U0001F44F。\n\n小憩一下，恢复精力，整装待发！很多同学可能很好奇了，为什么还只能拿一个银牌呢？那是因为我们的重构进程才走了一半呀✌️，但是不要担心，我们所有新的东西都已经讲完了，接下来就只是一些收尾工作了，当你能坚持到终点的时候，会有惊喜等着你哦！加油吧骚年\U0001F4AA。"
      - file: src/components/PostForm/index.jsx
        display: true
        explain:
          pre: >-
            ### 开始重构 “首页” 之旅


            我们依然按照之前的套路，从最底层的组件开始重构，首先是我们的登录框弹出层 `LoginForm` 组件，让我们打开
            `src/components/PostForm/index.jsx` 文件，对其中的内容作出相应的修改如下：
          post: "这个文件的形式和我们之前的 `src/components/LoginForm/index.jsx` 文件类似，可以看到，我们上面的文件中主要有四处改动：\n\n- 首先我们将 `formTitle` 和 `formContent ` 等状态放置到 `PostForm` 组件内部，并使用 `useState` Hooks 管理起来，因为它们只和此组件有关系。\n- 接着，我们将 `Input ` 里面的 `props.formTitle` 替换成 `formTitle`，将它的 `onInput ` 回调函数内部的设置改变状态的 `props. handleTitleInput` 替换成 `setFormTitle(e.target.value)` 的回调函数。\n- 接着，我们将 `Textarea ` 组件的 `props. formContent ` 替换成 `formContent `，将之前 `onInput` 接收的回调函数换成了 `setFormContent ` 的形式来设置 `formContent` 的变化。\n- 最后，我们将之前提交表单需要调用的父组件方法 `props.handleSubmit` 移动到组件内部来定义，可以看到，这个 `hanldeSubmit` 和我们之前定义在 `src/pages/index/index.js` 组件里的 `handleSubmit` 逻辑类似：\n  -  首先使用 `e.preventDefault` 禁止浏览器默认行为。\n  - 接着进行数据验证，不合要求的数据就会被驳回并显示警告（这里我们又显示对了\U0001F605）。\n  - 接着 dispatch 一个 `type` 为 `SET_POSTS` 的 action，将新发表的 post 添加到 Redux store 对应的 `posts` 数组中。我们注意到这里我们使用 `useSelector` Hooks 从 Redux store 里面获取了 `nickName` 和 `avatar` 属性，并把它们组合到 `post.user` 属性里，随着 action 的 payload 一起被 dispatch，我们用这个 `user` 属性标志发帖的用户属性。\n  - 清空表单状态。\n  - 接着我们 dispatch 一个 `type` 为 `SET_POST_FORM_IS_OPENED ` 的 action 用来更新 `isOpened` 属性，它将关闭展示发表帖子的表单弹出层 `FloatLayout` 组件。\n  - 最后提示发帖成功。\n"
      - file: src/components/PostCard/index.jsx
        display: true
        explain:
          pre: >-
            接着是我们 “首页” 页面组件另外一个底层子组件 `PostCard`，它主要用于展示一个帖子，让我们
            `src/components/PostCard/index.jsx` 文件，对其中的内容作出对应的修改如下：
          post: "可以看到这个组件基本不保有自己的状态，它接收来自父组件的状态，我们对它的修改主要有下面五个部分：\n\n- 将之前的直接获取 `props.title` 和 `props.content` 放到了 `props.post` 属性中，我们从 `props.post` 属性中导出我们需要展示的 `title` 和 `content`，还要一个额外的 `user` 属性，它应该是一个对象，保存着发帖人的用户属性，我们使用解构的方法获取 `user.avatar` 和 `user.nickName` 的值。\n- 接着我们看到 `return` 的组件结构发生了很大的变化，这里我们为了方便，使用了 `taro-ui` 提供给我们的 `Article` 文章样式组件，用于展示类似微信公众号文章页的一些样式，可供用户快速\b呈现文章内容，可以详情可以查看 [taro-ui 链接](https://taro-ui.jd.com/#/docs/article)，有了 `taro-ui` 加持，我们就额外的展示了发表此文章的用户头像（`avatar`）和昵称（`nickName`）。\n- 我们还可以看到，这里我们对原 `content` 做了一点修改，当 `PostCard` 组件在文章列表中被引用的时候，我们对内容长度进行截断，当超过 66 字符时，我们就截断它，并加上省略号 `...`。\n- 最后，我们改动了 `handleClick` 方法，之前是在跳转路由的页面路径里直接带上查询参数 `title` 和 `content` ，当我们要传递的内容多了，这个路径就会显得很臃肿，所以这里我们传递此文章对应的 `id`，这样可以通过此 `id` 取到完整的 `post` 数据，使路径保持简洁，这也是最佳实践的推荐做法。"
      - file: src/components/PostCard/index.scss
        display: true
        explain:
          pre: >-
            接着我们补充一下在 `PostCard` 组件里面会用到的样式，打开
            `src/components/PostCard/index.scss` 文件，补充和改进对应的样式如下：
          post: 可以看到我们更新了一些样式，然后引入了 `taro-ui` 提供给我们的 `article` 文章样式。
      - file: src/app.scss
        display: false
        explain:
          pre: ''
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            重构完 “首页” 页面组件的所有底层组件，我们开始完成最终的顶层组件，打开 `src/pages/index/index.jsx`
            文件，对相应的内容修改如下：
          post: >-
            可以看到我们上面的内容有以下五处改动：


            - 首先我们导出了 `useSelector` 钩子，然后从 Redux store 中获取了 `posts` 、`isOpened`
            和 `nickName` 等属性。

            - 接着，我们将之前定义在 `PostCard` 组件上的属性进行了一次换血，之前是直接传递 `title` 和 `content`
            属性，现在我们传递整个 `post` 属性，并且额外传递了一个 `postId` 属性，用于在 `PostCard`
            里面点击跳转路由时进行标注。

            - 接着，我们去掉 `PostForm` 组件上面的所有属性，因为我们已经在组件内部定义了它们。

            - 接着，我们使用 `useEffect` Hooks，在里面定义并调用了 `getStorage` 方法，获取了我们保存在
            `storage` 里面的用户登录信息，如果用户登录了，我们 dispatch 一个 `type` 为 `SET_LOGIN_INFO`
            的 action，将这份登录信息保存在 Redux store 里面以供后续使用。

            - 最后，我们将 `AtFab` 的 `onClick` 回调函数替换成
            `handleClickEdit`，在其中对用户点击进行判断，如果用户未登录，那么弹出警告，告知用户，如果用户已经登录，那么就
            dispatch 一个 `type` 为 `SET_POST_FORM_IS_OPENED` 的 action 去设置
            `isOpened` 属性，打开发帖的弹出层，允许用户进行发帖操作。
      - file: src/pages/post/post.jsx
        display: true
        explain:
          pre: "### 以重构 “文章详情” 页结束\n\n最后，让我们坚持一下，跑赢重构工作的最后一公里\U0001F4AA！完成 “文章详情” 页的重构。\n\n让我们打开 `src/pages/post/post.jsx` 文件，对其中的内容作出相应的修改如下："
          post: "可以看到，上面的文件做了以下四处修改：\n\n- 我们从 `router.params` 中导出了 `postId`，因为之前我们在 `PostCard` 里面点击跳转的路径参数使用了 `postId`。\n- 接着我们导入并使用 `useSelector` Hooks 获取了保存在 Redux store 中的 `posts` 属性，然后使用上一步获取到的 `postId`，来获取我们最终要渲染的 `post` 属性。\n- 最后，我们将传给 `PostCard` 的属性改成上一步获取到的 `post` 。\n\n\n::: warning\n**注意**\n\n这里的 `console.log` 是调试时使用的，生产环境中建议删掉。\n:::\n\n### 查看效果\n\n可以看到，在未登录状态下，会提示请登录：\n\n![](tuture-assets/taro-demo-notlogin.gif)\n\n在已登录的情况下，发帖子会显示当前登录用户的头像和昵称：\n\n![](tuture-assets/taro-demo5.gif)\n\n### 小结\n\n有幸！到这里，我们 Redux 重构之旅的万里长征就跑完了！让我们来回顾一下我们在这一小节中学到了那些东西。\n\n- 首先我们讲解了使用 Redux 的初衷，接着我们安装了相关依赖，然后引出了 Redux 三大核心概念：Store、Action、Reducers，接着我们创建了应用需要的两个 Reducer：`post` 和 `user`；接着我们将将 Redux 和 React 整合起来；因为 Action 是从组件中 dispatch 出来了，所以我们接下来就开始了组件的重构之旅。\n\n- 在重构 “我的” 页面组件时，我们按照 Redux 的思想，从它的底层组件三个登录按钮重构开始，接着重构了 `LoggedMine` 组件，再往上就是 `Header` 组件；重构完 `Header` 组件之后，我们接着从 `Footer` 组件的底层组件 `Logout` 组件开始重构，然后重构了 `LoginForm` 组件，最后是 `Footer` 组件，重构完 `Header` 和 `Footer` 组件，我们开始重构其上层组件 `mine` 页面组件，自此我们就完成了 “我的” 页面的重构。\n\n- 在重构 “首页” 页面组件时，我们同样按照 Redux 的思想，从它的底层组件 `PostForm` 组件开始，接着是 `PostCard` 组件，最后再回到顶层组件 `index` 首页页面组件。\n\n在重构 “帖子详情” 页面组件时，因为其底层组件 `PostCard` 已经重构过了，所以我们就直接重构了 `post` 帖子详情页面组件。\n\n能跟着这么长的文章坚持到这里，我想给你鼓个掌，也希望你能给自己鼓个掌，我想，我可以非常肯定且自豪的颁布给你第一名的奖章了\U0001F947。\n"
      - file: yarn.lock
    explain:
      pre: >-
        欢迎继续阅读《Taro 小程序开发大型实战》系列，前情回顾：


        - [熟悉的 React，熟悉的 Hooks](https://tuture.co/2019/12/25/34a473b/)：我们用 React
        和 Hooks 实现了一个非常简单的添加帖子的原型

        - [多页面跳转和 Taro UI 组件库](https://tuture.co/2019/12/25/af69225/)：我们用 Taro
        自带的路由功能实现了多页面跳转，并用 Taro UI 组件库升级了应用界面

        -
        [实现微信和支付宝多端登录](https://tuture.co/2019/12/25/af69225/5e10118/)：实现了微信、支付宝以及普通登录和退出登录


        如果你跟着敲到了这里，你一定会发现现在的状态管理和数据流越来越臃肿，组件状态的更新非常复杂。在这一篇中，我们将开始用 Redux 重构。


        如果你不熟悉 Redux，推荐阅读我们的《Redux 包教包会》系列教程：


        - [Redux 包教包会（一）：解救 React 状态危机](https://tuture.co/2019/11/28/1fe175a/)

        - [Redux 包教包会（二）：趁热打铁，完全重构](https://tuture.co/2019/11/28/d129c56/)

        - [Redux 包教包会（三）：各司其职，重拾初心](https://tuture.co/2019/11/28/a3b94eb/)


        如果你希望直接从这一步开始，请运行以下命令：


        ```bash

        git clone -b redux-start https://github.com/tuture-dev/ultra-club.git

        cd ultra-club

        ```



        ::: info

        **提示**


        这一篇的内容很长，要敲的代码很多，建议先收藏，在有空的时候抽出一大块时间去实践哦。相信经过这一篇的洗礼，不仅能对 Redux
        的理解更上一层楼，Taro 的开发功力也能大增！

        :::


        写到这一步，我们发现状态已经有点多了，而且 `src/pages/mine/mine.jsx` 文件是众多状态的顶层组件，比如我们的普通登录按钮
        `src/components/LoginButton/index.jsx` 组件和我们的
        `src/components/Footer/index.jsx` 组件，我们通过点击普通登录按钮打开登录弹窗的状态 `isOpened`
        需要在 `LoginButton` 里面进行操作，然后进而影响到 `Footer` 组件内的 `FloatLayout`
        弹窗组件，像这种涉及到多个子组件进行通信，我们将状态保存到公共父组件中的方式在 React 中叫做 ”状态提升“。


        但是随着状态增多，状态提升的状态也随着增多，导致保存这些状态的父组件会臃肿不堪，而且每次状态的改变需要影响很多中间组件，带来极大的性能开销，这种状态管理的难题我们一般交给专门的状态管理容器
        Redux 来做，而让 React  专注于渲染用户界面。


        Redux 不仅可以保证状态的可预测性，还能保证状态的变化只和对应的组件相关，不影响到无关的组件，关于 Redux
        的详细剖析的实战教程可以参考图雀社区的：[Redux
        包教包会系列文章](https://tuture.co/2019/11/28/1fe175a/)。


        在这一节中，我们将结合 React Hooks 和 Redux 来重构我们状态管理。
      post: 终于，这漫长的第四篇结束了。在接下里，我们将接触小程序云后台开发，并在前端接入后台数据。
